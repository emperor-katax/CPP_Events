// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "Item_01.generated.h"


DECLARE_DYNAMIC_MULTICAST_DELEGATE(FImpact_02);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FGetHealth, float, Health_01); 

// C++ Delegates
// https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Delegates/index.html
// https://answers.unrealengine.com/questions/259969/blueprint-implementable-custom-component-events.html
// https://answers.unrealengine.com/questions/697849/creating-an-event-on-an-actorcomponent-in-c-for-bl.html
// Delegate type declarations must start with "F" character and recomended to have a "unique name"
// https://forums.unrealengine.com/t/declare-dynamic-multicast-delegate-oneparam-with-tarray/431745?mobile_view=1



UCLASS()
class CPPEVENTS_01_API AItem_01 : public AActor{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AItem_01();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	//  delegate 
	UPROPERTY(BlueprintAssignable, Category = "Item 01")
		FImpact_02 OnImpact;

	UPROPERTY(BlueprintAssignable, Category = "Item 01")
		FGetHealth OnReciveHealth; 



	UFUNCTION(BlueprintCallable, Category = "Item 01")
		void SetupValues(FString name, int id);

	UFUNCTION(BlueprintCallable, Category = "Item 01")
		void Check_01();

	// check activation
	UFUNCTION(BlueprintCallable, Category = "Item 01")
		bool isActive();
	// check extra 
	UFUNCTION(BlueprintPure, Category = "Item 01")
		bool isExtra();

	/// This function is designed to be overridden by a blueprint.  Do not provide a body for this function;
	/// the autogenerated code will include a thunk that calls ProcessEvent to execute the overridden body.
	//BlueprintImplementableEvent,

	/// This function is designed to be overridden by a blueprint, but also has a native implementation.
	/// Provide a body named [FunctionName]_Implementation instead of [FunctionName]; the autogenerated
	/// code will include a thunk that calls the implementation method when necessary.
	//BlueprintNativeEvent,


	// set skill 
	UFUNCTION(BlueprintImplementableEvent, Category = "Item 01")
		void SkillSet();

	UFUNCTION(BlueprintNativeEvent, Category = "Item 01")
		void SkillControl();
	
	UFUNCTION(BlueprintImplementableEvent, Category = "Item 01")
		void SetDetails(const FString& Name, const int& ID);



	// get and set values by event
	// https://forums.unrealengine.com/development-discussion/c-gameplay-programming/23384-blueprintimplementableevent-bug
	// https://answers.unrealengine.com/questions/57955/return-a-value-from-a-blueprintimplementableevent.html
	// https://answers.unrealengine.com/questions/338927/pass-tassetptr-to-blueprintimplementableevent.html <-- TArray exceptions 

	// control maximum skill
	UFUNCTION(BlueprintNativeEvent, Category = "Item 01")
		bool SkillMAX();

};
